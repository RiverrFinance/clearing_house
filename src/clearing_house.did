type AddLiquidityToMarketParams = record { min_amount_out : nat; amount : nat };
type AssetClass = variant { Cryptocurrency; FiatCurrency };
type AssetLedger = record {
  ledger_id : principal;
  ledger_type : AssetLedgerType;
  asset_decimals : nat32;
};
type AssetLedgerType = variant { ICP; ICRC; RASSET };
type AssetPricingDetails = record { class : AssetClass; symbol : text };
type Bias = record { shorts : BiasDetails; longs : BiasDetails };
type BiasDetails = record {
  total_open_interest_dynamic : int;
  total_open_interest : nat;
  current_borrowing_factor : nat;
  total_units : nat;
  cummulative_borrowing_factor_since_epoch : nat;
  borrowing_exponent_factor_ : nat;
  cummulative_funding_factor_since_epoch : int;
  base_borrowing_factor : nat;
  total_debt_of_traders : nat;
  total_reserve : nat;
};
type ClosePositionParams = record {
  acceptable_price_limit : nat;
  position_id : nat64;
};
type ClosePositionResult = variant {
  Failed;
  Waiting;
  Settled : record { returns : nat };
};
type DepositParams = record { block_index : opt nat64; amount : nat };
type FailureReason = variant {
  PriceLimitExceeded;
  InsufficientBalance;
  Other;
  PriceFetcheFailed;
};
type FundingManager = record {
  threshold_stable_funding : nat;
  last_time_updated : nat64;
  funding_increase_factor_ps : nat;
  funding_exponent_factor : nat;
  funding_decrease_factor_ps : nat;
  next_funding_factor_ps : int;
  threshold_decrease_funding : nat;
  max_funding_factor_ps : nat;
  min_funding_factor_ps : nat;
  funding_factor : nat;
};
type HouseDetails = record {
  house_asset_ledger : AssetLedger;
  house_asset_pricing_details : AssetPricingDetails;
  execution_fee : nat;
};
type HouseLiquidityManager = record {
  free_liquidity : nat;
  liquidation_factor : nat;
  current_shorts_reserve : nat;
  total_liquidity_tokens_minted : nat;
  current_longs_reserve : nat;
  last_time_since_borrow_fees_collected : nat64;
  current_borrow_fees_owed : nat;
  bad_debt : nat;
  shorts_max_reserve_factor : nat;
  longs_max_reserve_factor : nat;
  current_net_debt : nat;
  total_deposit : nat;
};
type LiquidityOperationResult = variant {
  Failed;
  Waiting;
  Settled : record { amount_out : nat };
};
type MarketDetails = record {
  bias_tracker : Bias;
  state : MarketState;
  pricing_manager : PricingManager;
  token_identifier : text;
  funding_manager : FundingManager;
  index_asset_pricing_details : AssetPricingDetails;
  liquidity_manager : HouseLiquidityManager;
};
type MarketState = record {
  liquidation_factor : nat;
  max_leverage_factor : nat;
  max_reserve_factor : nat;
};
type OpenPositionParams = record {
  acceptable_price_limit : nat;
  owner : principal;
  long : bool;
  collateral : nat;
  reserve_factor : nat;
  market_index : nat64;
  leverage_factor : nat;
};
type OpenPositioninMarketResult = variant {
  Failed : record { reason : FailureReason };
  Settled : record { position : PositionDetails };
};
type PositionDetails = record {
  pre_cummulative_funding_factor : int;
  max_reserve : nat;
  owner : principal;
  debt : nat;
  long : bool;
  collateral : nat;
  pre_cummulative_borrowing_factor : nat;
  units : nat;
};
type PricingManager = record {
  negative_price_impact_factor : nat;
  price_impact_exponent_factor : nat;
  positive_price_impact_factor : nat;
  last_fetched : nat64;
  price : nat;
};
type RemoveLiquidityFromMarketParams = record {
  min_amount_out : nat;
  amount_in : nat;
};
type WithdrawParams = record { amount : nat };
service : (HouseDetails) -> {
  addLiquidity : (nat64, AddLiquidityToMarketParams) -> (
      LiquidityOperationResult,
    );
  addMarket : (MarketDetails) -> ();
  closePosition : (ClosePositionParams) -> (ClosePositionResult);
  deposit : (DepositParams) -> ();
  get_market_details : (nat64) -> (opt MarketDetails) query;
  get_markets_count : () -> (nat64) query;
  get_user_balance : (principal) -> (nat) query;
  get_user_market_liquidity_shares : (principal, nat64) -> (nat) query;
  open_position : (OpenPositionParams) -> (OpenPositioninMarketResult);
  remove_liquidity : (nat64, RemoveLiquidityFromMarketParams) -> ();
  setAdmin : (principal) -> ();
  withdraw : (WithdrawParams) -> ();
}
